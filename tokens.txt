typedef	Keyword
enum	Keyword
my_enum	Identifier
{	Delimiter
A	Identifier
,	Delimiter
B	Identifier
,	Delimiter
C	Identifier
,	Delimiter
D	Identifier
,	Delimiter
E	Identifier
}	Delimiter
my_enum	Identifier
;	Delimiter
typedef	Keyword
struct	Keyword
my_struct	Identifier
{	Delimiter
int	Keyword
val	Identifier
;	Delimiter
struct	Keyword
my_struct	Identifier
*	Delimiter
next	Identifier
;	Delimiter
}	Delimiter
my_struct	Identifier
;	Delimiter
my_struct	Identifier
*	Delimiter
who_is_the_next	Identifier
(	Delimiter
my_struct	Identifier
*	Delimiter
a_struct	Identifier
)	Delimiter
{	Delimiter
if	Keyword
(	Delimiter
a_struct	Identifier
)	Delimiter
return	Keyword
a_struct	Identifier
->	Delimiter
next	Identifier
;	Delimiter
return	Keyword
(	Delimiter
(	Delimiter
void	Keyword
*	Delimiter
)	Delimiter
0	Numeric
)	Delimiter
;	Delimiter
}	Delimiter
int	Keyword
main	Identifier
(	Delimiter
int	Keyword
argc	Identifier
,	Delimiter
char	Keyword
*	Delimiter
argv	Identifier
[	Delimiter
]	Delimiter
)	Delimiter
{	Delimiter
int	Keyword
a	Identifier
=	Delimiter
2	Numeric
;	Delimiter
int	Keyword
b	Identifier
=	Delimiter
1	Numeric
;	Delimiter
int	Keyword
c	Identifier
,	Delimiter
d	Identifier
;	Delimiter
int	Keyword
_true	Identifier
=	Delimiter
1	Numeric
,	Delimiter
_false	Identifier
=	Delimiter
0	Numeric
;	Delimiter
if	Keyword
(	Delimiter
_true	Identifier
&&	Delimiter
_false	Identifier
)	Delimiter
{	Delimiter
c	Identifier
=	Delimiter
a	Identifier
+	Delimiter
b	Identifier
;	Delimiter
d	Identifier
=	Delimiter
a	Identifier
*	Delimiter
b	Identifier
;	Delimiter
}	Delimiter
else	Keyword
if	Keyword
(	Delimiter
_true	Identifier
||	Delimiter
_false	Identifier
)	Delimiter
{	Delimiter
c	Identifier
=	Delimiter
a	Identifier
-	Delimiter
b	Identifier
;	Delimiter
d	Identifier
=	Delimiter
a	Identifier
/	Delimiter
b	Identifier
;	Delimiter
}	Delimiter
else	Keyword
{	Delimiter
c	Identifier
=	Delimiter
a	Identifier
&	Delimiter
b	Identifier
;	Delimiter
d	Identifier
=	Delimiter
a	Identifier
|	Delimiter
b	Identifier
;	Delimiter
}	Delimiter
char	Keyword
i_am_id	Identifier
=	Delimiter
'c'	Character
;	Delimiter
char	Keyword
*	Delimiter
yet_another_id	Identifier
=	Delimiter
"well, hello lexer :^)"	String
;	Delimiter
int	Keyword
i	Identifier
=	Delimiter
10	Numeric
;	Delimiter
int	Keyword
sum	Identifier
=	Delimiter
0	Numeric
;	Delimiter
while	Keyword
(	Delimiter
i	Identifier
>=	Delimiter
0	Numeric
)	Delimiter
{	Delimiter
sum	Identifier
+=	Delimiter
i	Identifier
;	Delimiter
i	Identifier
--	Delimiter
;	Delimiter
}	Delimiter
sum	Identifier
=	Delimiter
0	Numeric
;	Delimiter
for	Keyword
(	Delimiter
int	Keyword
i	Identifier
=	Delimiter
1	Numeric
;	Delimiter
i	Identifier
<=	Delimiter
50	Numeric
;	Delimiter
i	Identifier
++	Delimiter
)	Delimiter
{	Delimiter
sum	Identifier
+=	Delimiter
i	Identifier
;	Delimiter
}	Delimiter
my_struct	Identifier
a_struct	Identifier
;	Delimiter
my_struct	Identifier
*	Delimiter
the_next	Identifier
=	Delimiter
who_is_the_next	Identifier
(	Delimiter
&	Delimiter
a_struct	Identifier
)	Delimiter
;	Delimiter
int	Keyword
the_val	Identifier
=	Delimiter
a_struct	Identifier
.	Delimiter
val	Identifier
;	Delimiter
return	Keyword
0	Numeric
;	Delimiter
}	Delimiter
